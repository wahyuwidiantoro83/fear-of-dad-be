// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  metricSize  MetricSize  @relation(fields: [metricId], references: [id])
  metricId    Int
  user        User      @relation(fields: [updatedBy], references: [id])
  updatedBy   Int  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?  
  genders     Gender[]  @relation("ProductGenders")  
  categories  Category[] @relation("ProductCategories")  
  productVariants ProductVariant[]
  colors      Color[]   @relation("ProductColors")
}

model Color {
  id          Int       @id @default(autoincrement())
  uniqueId    String    @default(uuid())
  name        String
  colorImage  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?  
  products    Product[] @relation("ProductColors")
  productVariants ProductVariant[]
}

model Gender {
  id          Int       @id @default(autoincrement()) 
  uniqueId    String    @default(uuid())
  name        String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?         
  products    Product[] @relation("ProductGenders")  
}

model Category {
  id          Int       @id @default(autoincrement()) 
  uniqueId    String    @default(uuid())
  name        String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  products    Product[] @relation("ProductCategories")
}

model MetricSize {
  id          Int       @id @default(autoincrement())
  uniqueId    String    @default(uuid())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime? 
  sizes       Size[]
  products    Product[]
}

model Size {
  id          Int       @id @default(autoincrement())
  uniqueId    String    @default(uuid())
  name        String
  metric      MetricSize   @relation(fields: [metricId], references: [id])
  metricId    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?  
  productVariants ProductVariant[]
}

model ProductVariant {
  id          Int       @id @default(autoincrement())
  code        String    @default(uuid())
  product     Product   @relation(fields: [productId], references: [id])
  productId   Int
  color       Color     @relation(fields: [colorId], references: [id])
  colorId     Int
  size        Size      @relation(fields: [sizeId], references: [id])
  sizeId      Int
  price       Decimal   @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?   
  stocks      Stock?
  orderLists  OrderList[]
  cartLists    CartDetail[]
  wishLists   WishListDetail[]
  productDiscounts DiscountProduct[]
}

model Stock {
  id          Int       @id @default(autoincrement())
  prev        Int       @default(0)
  current     Int       @default(0)
  productVariant   ProductVariant  @relation(fields: [productId], references: [id])
  productId   Int       @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [updatedBy], references: [id])
  updatedBy   Int
  StockLog    StockLog[]    
}

model StockLog {
  id          Int       @id @default(autoincrement())
  stocks      Stock     @relation(fields: [stockId], references: [id])
  stockId     Int
  prev        Decimal
  current     Decimal
  change      Decimal
  notes       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model OrderList {
  id          Int       @id @default(autoincrement()) 
  product     ProductVariant   @relation(fields: [productId], references: [id])
  productId   Int
  order       Order     @relation(fields: [orderId], references: [id])
  orderId     Int
  price       Decimal
  finalPrice  Decimal
  discounts   Discount[] @relation("OrderListDiscount")     
}

model Order {
  id          Int       @id @default(autoincrement())
  trxId       String    @default(uuid())
  orderLists  OrderList[]
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  totalPrice  Decimal
  finalPrice  Decimal  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  vouchers    Voucher[] @relation("OrderVoucher")
  OrderInfo   OrderInfo?
  logs        OrderLog[]
}

model OrderInfo {
  id          Int       @id @default(autoincrement())
  order       Order     @relation(fields: [orderId], references: [id])
  orderId     Int       @unique
  isDone      Boolean   @default(false)
  paymentMethod String?
  shipMethod  String?
  shipId      String?
  shipPrice   Decimal   @default(0)
  paidAt      DateTime?
  expiredAt   DateTime?
  shipAt      DateTime?
  doneAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model OrderLog {
  id          Int       @id @default(autoincrement())
  order       Order     @relation(fields: [orderId], references: [id])
  orderId     Int
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum Offer {
  PERCENTAGE
  PRICE_CUT
}

enum OfferLimitType {
  STOCK_LIMIT
  DATE_LIMIT
}

model Discount {
  id          Int       @id @default(autoincrement())
  discountId  String    @default(uuid())
  discType    Offer     @default(PRICE_CUT)
  value       Decimal    @default(0)
  limitType   OfferLimitType @default(STOCK_LIMIT)
  limitStock  Int       @default(0)
  startOffer  DateTime?
  endOffer    DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime? 
  orderLists  OrderList[] @relation("OrderListDiscount")
  DiscountProducts DiscountProduct[]
}

model DiscountProduct {
  id          Int       @id @default(autoincrement())
  productVariant   ProductVariant  @relation(fields: [productId], references: [id])
  productId   Int       
  discount    Discount  @relation(fields: [discountId], references: [id])
  discountId  Int      
}

model Voucher {
  id          Int       @id @default(autoincrement())
  voucherId   String    @default(uuid())
  code        String
  voucherType Offer     @default(PRICE_CUT)
  value       Decimal   @default(0)
  limitType   OfferLimitType @default(STOCK_LIMIT)
  limitStock  Int       @default(0)
  startOffer  DateTime?
  endOffer    DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime? 
  orders      Order[]   @relation("OrderVoucher")
}

model Cart {
  id          Int       @id @default(autoincrement())
  cartId      String    @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  details     CartDetail[]
}

model CartDetail {
  id          Int       @id @default(autoincrement())
  cart        Cart      @relation(fields: [cartId], references: [id])
  cartId      Int
  product     ProductVariant  @relation(fields: [productId], references: [id])
  productId   Int
  qty         Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model WishList {
  id          Int       @id @default(autoincrement())
  cartId      String    @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  details     WishListDetail[]
}

model WishListDetail {
  id          Int       @id @default(autoincrement())
  wishlist    WishList  @relation(fields: [wishId], references: [id])
  wishId      Int
  product     ProductVariant  @relation(fields: [productId], references: [id])
  productId   Int
  qty         Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

enum RoleEnum {
  SUPER_ADMIN
  ADMIN
  USER
}

enum TokenMethodEnum {
  VERIF
  RESET
}

enum GenderEnum {
  MALE
  FEMALE
}

model UserAddress {
  id          Int       @id @default(autoincrement())
  uuid        String    @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  address     String?
  postalCode  String?
  lat         String?
  long        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model User {
  id          Int       @id @default(autoincrement())
  uuid        String    @default(uuid())
  email       String    @unique
  password    String?
  avatar      String?
  phone       String?   @unique
  firstName   String?
  lastName    String?
  birthDate   DateTime?
  gender      GenderEnum?
  postalCode  String?
  address     String?
  lat         String?
  long        String?
  role        RoleEnum  @default(USER)
  isValidated Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  orders      Order[]
  stocks      Stock[]
  products    Product[]
  tokens      Token[]
  carts       Cart[]
  wishLists   WishList[]
  addresses   UserAddress[] 
}

model Token {
  id          Int       @id @default(autoincrement())
  Token       String
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  isUsed      Boolean   @default(false)
  expiredAt   DateTime
  method      TokenMethodEnum   @default(VERIF)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}